// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: control.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/caldog20/overlay/proto/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControlPlaneName is the fully-qualified name of the ControlPlane service.
	ControlPlaneName = "proto.ControlPlane"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControlPlaneLoginPeerProcedure is the fully-qualified name of the ControlPlane's LoginPeer RPC.
	ControlPlaneLoginPeerProcedure = "/proto.ControlPlane/LoginPeer"
	// ControlPlaneRegisterPeerProcedure is the fully-qualified name of the ControlPlane's RegisterPeer
	// RPC.
	ControlPlaneRegisterPeerProcedure = "/proto.ControlPlane/RegisterPeer"
	// ControlPlaneSetPeerEndpointProcedure is the fully-qualified name of the ControlPlane's
	// SetPeerEndpoint RPC.
	ControlPlaneSetPeerEndpointProcedure = "/proto.ControlPlane/SetPeerEndpoint"
	// ControlPlaneUpdateProcedure is the fully-qualified name of the ControlPlane's Update RPC.
	ControlPlaneUpdateProcedure = "/proto.ControlPlane/Update"
	// ControlPlanePunchProcedure is the fully-qualified name of the ControlPlane's Punch RPC.
	ControlPlanePunchProcedure = "/proto.ControlPlane/Punch"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	controlPlaneServiceDescriptor               = gen.File_control_proto.Services().ByName("ControlPlane")
	controlPlaneLoginPeerMethodDescriptor       = controlPlaneServiceDescriptor.Methods().ByName("LoginPeer")
	controlPlaneRegisterPeerMethodDescriptor    = controlPlaneServiceDescriptor.Methods().ByName("RegisterPeer")
	controlPlaneSetPeerEndpointMethodDescriptor = controlPlaneServiceDescriptor.Methods().ByName("SetPeerEndpoint")
	controlPlaneUpdateMethodDescriptor          = controlPlaneServiceDescriptor.Methods().ByName("Update")
	controlPlanePunchMethodDescriptor           = controlPlaneServiceDescriptor.Methods().ByName("Punch")
)

// ControlPlaneClient is a client for the proto.ControlPlane service.
type ControlPlaneClient interface {
	LoginPeer(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error)
	RegisterPeer(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error)
	SetPeerEndpoint(context.Context, *connect.Request[gen.Endpoint]) (*connect.Response[gen.EmptyResponse], error)
	Update(context.Context, *connect.Request[gen.UpdateRequest]) (*connect.ServerStreamForClient[gen.UpdateResponse], error)
	Punch(context.Context, *connect.Request[gen.PunchRequest]) (*connect.Response[gen.EmptyResponse], error)
}

// NewControlPlaneClient constructs a client for the proto.ControlPlane service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControlPlaneClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControlPlaneClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &controlPlaneClient{
		loginPeer: connect.NewClient[gen.LoginRequest, gen.LoginResponse](
			httpClient,
			baseURL+ControlPlaneLoginPeerProcedure,
			connect.WithSchema(controlPlaneLoginPeerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerPeer: connect.NewClient[gen.RegisterRequest, gen.RegisterResponse](
			httpClient,
			baseURL+ControlPlaneRegisterPeerProcedure,
			connect.WithSchema(controlPlaneRegisterPeerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setPeerEndpoint: connect.NewClient[gen.Endpoint, gen.EmptyResponse](
			httpClient,
			baseURL+ControlPlaneSetPeerEndpointProcedure,
			connect.WithSchema(controlPlaneSetPeerEndpointMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[gen.UpdateRequest, gen.UpdateResponse](
			httpClient,
			baseURL+ControlPlaneUpdateProcedure,
			connect.WithSchema(controlPlaneUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		punch: connect.NewClient[gen.PunchRequest, gen.EmptyResponse](
			httpClient,
			baseURL+ControlPlanePunchProcedure,
			connect.WithSchema(controlPlanePunchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// controlPlaneClient implements ControlPlaneClient.
type controlPlaneClient struct {
	loginPeer       *connect.Client[gen.LoginRequest, gen.LoginResponse]
	registerPeer    *connect.Client[gen.RegisterRequest, gen.RegisterResponse]
	setPeerEndpoint *connect.Client[gen.Endpoint, gen.EmptyResponse]
	update          *connect.Client[gen.UpdateRequest, gen.UpdateResponse]
	punch           *connect.Client[gen.PunchRequest, gen.EmptyResponse]
}

// LoginPeer calls proto.ControlPlane.LoginPeer.
func (c *controlPlaneClient) LoginPeer(ctx context.Context, req *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error) {
	return c.loginPeer.CallUnary(ctx, req)
}

// RegisterPeer calls proto.ControlPlane.RegisterPeer.
func (c *controlPlaneClient) RegisterPeer(ctx context.Context, req *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error) {
	return c.registerPeer.CallUnary(ctx, req)
}

// SetPeerEndpoint calls proto.ControlPlane.SetPeerEndpoint.
func (c *controlPlaneClient) SetPeerEndpoint(ctx context.Context, req *connect.Request[gen.Endpoint]) (*connect.Response[gen.EmptyResponse], error) {
	return c.setPeerEndpoint.CallUnary(ctx, req)
}

// Update calls proto.ControlPlane.Update.
func (c *controlPlaneClient) Update(ctx context.Context, req *connect.Request[gen.UpdateRequest]) (*connect.ServerStreamForClient[gen.UpdateResponse], error) {
	return c.update.CallServerStream(ctx, req)
}

// Punch calls proto.ControlPlane.Punch.
func (c *controlPlaneClient) Punch(ctx context.Context, req *connect.Request[gen.PunchRequest]) (*connect.Response[gen.EmptyResponse], error) {
	return c.punch.CallUnary(ctx, req)
}

// ControlPlaneHandler is an implementation of the proto.ControlPlane service.
type ControlPlaneHandler interface {
	LoginPeer(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error)
	RegisterPeer(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error)
	SetPeerEndpoint(context.Context, *connect.Request[gen.Endpoint]) (*connect.Response[gen.EmptyResponse], error)
	Update(context.Context, *connect.Request[gen.UpdateRequest], *connect.ServerStream[gen.UpdateResponse]) error
	Punch(context.Context, *connect.Request[gen.PunchRequest]) (*connect.Response[gen.EmptyResponse], error)
}

// NewControlPlaneHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControlPlaneHandler(svc ControlPlaneHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controlPlaneLoginPeerHandler := connect.NewUnaryHandler(
		ControlPlaneLoginPeerProcedure,
		svc.LoginPeer,
		connect.WithSchema(controlPlaneLoginPeerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneRegisterPeerHandler := connect.NewUnaryHandler(
		ControlPlaneRegisterPeerProcedure,
		svc.RegisterPeer,
		connect.WithSchema(controlPlaneRegisterPeerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneSetPeerEndpointHandler := connect.NewUnaryHandler(
		ControlPlaneSetPeerEndpointProcedure,
		svc.SetPeerEndpoint,
		connect.WithSchema(controlPlaneSetPeerEndpointMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	controlPlaneUpdateHandler := connect.NewServerStreamHandler(
		ControlPlaneUpdateProcedure,
		svc.Update,
		connect.WithSchema(controlPlaneUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	controlPlanePunchHandler := connect.NewUnaryHandler(
		ControlPlanePunchProcedure,
		svc.Punch,
		connect.WithSchema(controlPlanePunchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.ControlPlane/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControlPlaneLoginPeerProcedure:
			controlPlaneLoginPeerHandler.ServeHTTP(w, r)
		case ControlPlaneRegisterPeerProcedure:
			controlPlaneRegisterPeerHandler.ServeHTTP(w, r)
		case ControlPlaneSetPeerEndpointProcedure:
			controlPlaneSetPeerEndpointHandler.ServeHTTP(w, r)
		case ControlPlaneUpdateProcedure:
			controlPlaneUpdateHandler.ServeHTTP(w, r)
		case ControlPlanePunchProcedure:
			controlPlanePunchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControlPlaneHandler returns CodeUnimplemented from all methods.
type UnimplementedControlPlaneHandler struct{}

func (UnimplementedControlPlaneHandler) LoginPeer(context.Context, *connect.Request[gen.LoginRequest]) (*connect.Response[gen.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ControlPlane.LoginPeer is not implemented"))
}

func (UnimplementedControlPlaneHandler) RegisterPeer(context.Context, *connect.Request[gen.RegisterRequest]) (*connect.Response[gen.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ControlPlane.RegisterPeer is not implemented"))
}

func (UnimplementedControlPlaneHandler) SetPeerEndpoint(context.Context, *connect.Request[gen.Endpoint]) (*connect.Response[gen.EmptyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ControlPlane.SetPeerEndpoint is not implemented"))
}

func (UnimplementedControlPlaneHandler) Update(context.Context, *connect.Request[gen.UpdateRequest], *connect.ServerStream[gen.UpdateResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.ControlPlane.Update is not implemented"))
}

func (UnimplementedControlPlaneHandler) Punch(context.Context, *connect.Request[gen.PunchRequest]) (*connect.Response[gen.EmptyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.ControlPlane.Punch is not implemented"))
}
