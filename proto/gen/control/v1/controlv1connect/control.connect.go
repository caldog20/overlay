// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: control/v1/control.proto

package controlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/caldog20/overlay/proto/gen/control/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControllerServiceName is the fully-qualified name of the ControllerService service.
	ControllerServiceName = "control.v1.ControllerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControllerServiceRegisterPeerProcedure is the fully-qualified name of the ControllerService's
	// RegisterPeer RPC.
	ControllerServiceRegisterPeerProcedure = "/control.v1.ControllerService/RegisterPeer"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	controllerServiceServiceDescriptor            = v1.File_control_v1_control_proto.Services().ByName("ControllerService")
	controllerServiceRegisterPeerMethodDescriptor = controllerServiceServiceDescriptor.Methods().ByName("RegisterPeer")
)

// ControllerServiceClient is a client for the control.v1.ControllerService service.
type ControllerServiceClient interface {
	// rpc LoginPeer(LoginPeerRequest) returns (LoginPeerResponse) {}
	RegisterPeer(context.Context, *connect.Request[v1.RegisterPeerRequest]) (*connect.Response[v1.RegisterPeerResponse], error)
}

// NewControllerServiceClient constructs a client for the control.v1.ControllerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &controllerServiceClient{
		registerPeer: connect.NewClient[v1.RegisterPeerRequest, v1.RegisterPeerResponse](
			httpClient,
			baseURL+ControllerServiceRegisterPeerProcedure,
			connect.WithSchema(controllerServiceRegisterPeerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// controllerServiceClient implements ControllerServiceClient.
type controllerServiceClient struct {
	registerPeer *connect.Client[v1.RegisterPeerRequest, v1.RegisterPeerResponse]
}

// RegisterPeer calls control.v1.ControllerService.RegisterPeer.
func (c *controllerServiceClient) RegisterPeer(ctx context.Context, req *connect.Request[v1.RegisterPeerRequest]) (*connect.Response[v1.RegisterPeerResponse], error) {
	return c.registerPeer.CallUnary(ctx, req)
}

// ControllerServiceHandler is an implementation of the control.v1.ControllerService service.
type ControllerServiceHandler interface {
	// rpc LoginPeer(LoginPeerRequest) returns (LoginPeerResponse) {}
	RegisterPeer(context.Context, *connect.Request[v1.RegisterPeerRequest]) (*connect.Response[v1.RegisterPeerResponse], error)
}

// NewControllerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerServiceHandler(svc ControllerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerServiceRegisterPeerHandler := connect.NewUnaryHandler(
		ControllerServiceRegisterPeerProcedure,
		svc.RegisterPeer,
		connect.WithSchema(controllerServiceRegisterPeerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/control.v1.ControllerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerServiceRegisterPeerProcedure:
			controllerServiceRegisterPeerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerServiceHandler struct{}

func (UnimplementedControllerServiceHandler) RegisterPeer(context.Context, *connect.Request[v1.RegisterPeerRequest]) (*connect.Response[v1.RegisterPeerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("control.v1.ControllerService.RegisterPeer is not implemented"))
}
