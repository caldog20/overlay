// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: msg.proto

package msg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlServiceClient is the client API for ControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WhoIsIp(ctx context.Context, in *WhoIsIPRequest, opts ...grpc.CallOption) (*WhoIsIPReply, error)
	WhoIsID(ctx context.Context, in *WhoIsIDRequest, opts ...grpc.CallOption) (*WhoIsIDReply, error)
	RemoteList(ctx context.Context, in *RemoteListRequest, opts ...grpc.CallOption) (*RemoteListReply, error)
	PunchSubscriber(ctx context.Context, in *PunchSubscribe, opts ...grpc.CallOption) (ControlService_PunchSubscriberClient, error)
	Punch(ctx context.Context, in *PunchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type controlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlServiceClient(cc grpc.ClientConnInterface) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/msg.ControlService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/msg.ControlService/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) WhoIsIp(ctx context.Context, in *WhoIsIPRequest, opts ...grpc.CallOption) (*WhoIsIPReply, error) {
	out := new(WhoIsIPReply)
	err := c.cc.Invoke(ctx, "/msg.ControlService/WhoIsIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) WhoIsID(ctx context.Context, in *WhoIsIDRequest, opts ...grpc.CallOption) (*WhoIsIDReply, error) {
	out := new(WhoIsIDReply)
	err := c.cc.Invoke(ctx, "/msg.ControlService/WhoIsID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) RemoteList(ctx context.Context, in *RemoteListRequest, opts ...grpc.CallOption) (*RemoteListReply, error) {
	out := new(RemoteListReply)
	err := c.cc.Invoke(ctx, "/msg.ControlService/RemoteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) PunchSubscriber(ctx context.Context, in *PunchSubscribe, opts ...grpc.CallOption) (ControlService_PunchSubscriberClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[0], "/msg.ControlService/PunchSubscriber", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServicePunchSubscriberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlService_PunchSubscriberClient interface {
	Recv() (*PunchNotification, error)
	grpc.ClientStream
}

type controlServicePunchSubscriberClient struct {
	grpc.ClientStream
}

func (x *controlServicePunchSubscriberClient) Recv() (*PunchNotification, error) {
	m := new(PunchNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlServiceClient) Punch(ctx context.Context, in *PunchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/msg.ControlService/Punch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServiceServer is the server API for ControlService service.
// All implementations must embed UnimplementedControlServiceServer
// for forward compatibility
type ControlServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Deregister(context.Context, *DeregisterRequest) (*emptypb.Empty, error)
	WhoIsIp(context.Context, *WhoIsIPRequest) (*WhoIsIPReply, error)
	WhoIsID(context.Context, *WhoIsIDRequest) (*WhoIsIDReply, error)
	RemoteList(context.Context, *RemoteListRequest) (*RemoteListReply, error)
	PunchSubscriber(*PunchSubscribe, ControlService_PunchSubscriberServer) error
	Punch(context.Context, *PunchRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedControlServiceServer()
}

// UnimplementedControlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControlServiceServer struct {
}

func (UnimplementedControlServiceServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedControlServiceServer) Deregister(context.Context, *DeregisterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedControlServiceServer) WhoIsIp(context.Context, *WhoIsIPRequest) (*WhoIsIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoIsIp not implemented")
}
func (UnimplementedControlServiceServer) WhoIsID(context.Context, *WhoIsIDRequest) (*WhoIsIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoIsID not implemented")
}
func (UnimplementedControlServiceServer) RemoteList(context.Context, *RemoteListRequest) (*RemoteListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteList not implemented")
}
func (UnimplementedControlServiceServer) PunchSubscriber(*PunchSubscribe, ControlService_PunchSubscriberServer) error {
	return status.Errorf(codes.Unimplemented, "method PunchSubscriber not implemented")
}
func (UnimplementedControlServiceServer) Punch(context.Context, *PunchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Punch not implemented")
}
func (UnimplementedControlServiceServer) mustEmbedUnimplementedControlServiceServer() {}

// UnsafeControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServiceServer will
// result in compilation errors.
type UnsafeControlServiceServer interface {
	mustEmbedUnimplementedControlServiceServer()
}

func RegisterControlServiceServer(s grpc.ServiceRegistrar, srv ControlServiceServer) {
	s.RegisterService(&ControlService_ServiceDesc, srv)
}

func _ControlService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ControlService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ControlService/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Deregister(ctx, req.(*DeregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_WhoIsIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoIsIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).WhoIsIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ControlService/WhoIsIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).WhoIsIp(ctx, req.(*WhoIsIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_WhoIsID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoIsIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).WhoIsID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ControlService/WhoIsID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).WhoIsID(ctx, req.(*WhoIsIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_RemoteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).RemoteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ControlService/RemoteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).RemoteList(ctx, req.(*RemoteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_PunchSubscriber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PunchSubscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).PunchSubscriber(m, &controlServicePunchSubscriberServer{stream})
}

type ControlService_PunchSubscriberServer interface {
	Send(*PunchNotification) error
	grpc.ServerStream
}

type controlServicePunchSubscriberServer struct {
	grpc.ServerStream
}

func (x *controlServicePunchSubscriberServer) Send(m *PunchNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlService_Punch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Punch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ControlService/Punch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Punch(ctx, req.(*PunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlService_ServiceDesc is the grpc.ServiceDesc for ControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ControlService_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _ControlService_Deregister_Handler,
		},
		{
			MethodName: "WhoIsIp",
			Handler:    _ControlService_WhoIsIp_Handler,
		},
		{
			MethodName: "WhoIsID",
			Handler:    _ControlService_WhoIsID_Handler,
		},
		{
			MethodName: "RemoteList",
			Handler:    _ControlService_RemoteList_Handler,
		},
		{
			MethodName: "Punch",
			Handler:    _ControlService_Punch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PunchSubscriber",
			Handler:       _ControlService_PunchSubscriber_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "msg.proto",
}
